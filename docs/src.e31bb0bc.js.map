{"version":3,"sources":["graph.js","move.js","render.js","index.js"],"names":["initialCells","Array","fill","undefined","map","_","i","MIN_CELL","MAX_CELL","borderLeft","borderRight","cellN","calculateGraph","cells","cell","left","right","top","down","isLeft","includes","isRight","isTop","isDown","edges","filter","edge","vertex","initialGraph","move","graph","cellVertex","find","hasEmptyCell","length","vertexes","emptyIndex","indexOf","cellIndex","splice","render","grid","document","querySelector","innerHTML","cellElements","cellElement","createElement","className","classList","add","dataset","forEach","appendChild","clickHandler","newGraph","Number","querySelectorAll","addEventListener","e","target","randomGenerator","Math","floor","random","startButton","start","intervalId","setInterval","setTimeout","clearInterval","removeEventListener"],"mappings":";;AGAA;;AACA;;AHDA,AGEA,IHFMA,YAAY,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAeC,SAAf,EAA0BC,GAA1B,CAA8B,UAACC,CAAD,EAAIC,CAAJ;AAAA,ACAnD,ACAO,IAAMkC,KFAgDlC,CAAV,AEAhC,GAAG,SAATkC,MAAS,CAAAV,KAAK,EAAI;AFAoB,AEC/C,CFDiB,CAArB,IECOA,KAAK,KAAK,IAAb,EAAmB;AFChB,ACAA,ACAC,IFAKvB,ACAAsB,IAAI,GAAG,ACAL,CFAM,GAAG,AEAhB,CFAD,ICAMA,IAAO,CAACf,IAAD,EAAOgB,KAAP,EAAiB;AACjC,ACAC,MDAEhB,IAAI,GAAGN,eAAP,IAAmBM,IAAI,GAAGP,eAA7B,EAAuC;ADApC,ACCC,IDDKC,OCCE,CDDM,GAAG,ACChB,EDDD;ACEF,ACDD,MAAMiC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;AFAJ,AECIF,EAAAA,EFDEhC,EECE,CAACmC,OFDO,EECZ,CFDe,CAAC,CAAD,AECE,EFDE,AECnB,CFDe,EAAO,CAAP,EAAU,EAAV,CAAnB;AACA,ACCI,ACAA,IFDElC,ECCIqB,ACAAlB,KAAK,GAAGiB,CFDD,CCCG,EDDArB,CCCGqB,ACAA,CAAC1B,GAAN,CDAU,ACAA,CDAC4B,GDDC,CAAC5B,ACCR,CAAW,EDDd,CAAe,CECPuB,MDAMA,ACAA,GFDChB,GCCK,EDDA;AAAA,ACCA,ACAN,SFDUA,ECCAgB,ACANA,GFDW,GAAG,ACCF,ACAN,CFDJ,ACCWA,ACANA,MDAD,ACAV,KDA4Bb,IAAtB;ADDA,ACCA,ACAN,CFDd,CAApB,CCCuB,ACAL,CDAd,ACAA;ADCA,ACAA,MDAMmB,ACAAY,YDAY,ACAA,GDAGd,ACAAlB,KAAK,CAACT,GAAN,CDAU,ACAA,CDACoB,KAAX,CAAiBC,GCAPX,GDAV,CAAwB,ACAV,EAAI,QDAMY,IAAI;ADA9C,ACA8C,ACC7C,IFDKd,IECCkC,GDD2CpB,IAAI,GDAlC,CECF,CDDyC,CDApC,ACAuB,CCCzBgB,QFDf9B,AECuB,CAACmC,aFDP,AECF,CFDElC,AECqB,KFDhB,AECP,CAApB;AFD2B,ACAkB,ACE7CiC,GDFiB,CCEjBA,CDF6DZ,IDA9BrB,ECAd,GDAmB,ACAkC,CDAjCT,ACAzC,ACEe,CAAC4C,EFFmB,CAAU,MEEzC,IFF0ClC,IAAD,EAAOR,CAAP,EAAa,SEElBQ,IAApC;AFDJ,AGJJ,IAAIgB,IHIMf,CGJD,GHIK,AGJFa,GHIKtB,CAAC,GAAG,CAAjB,WGJJ;AHKI,ACDA,ACEI,MDFD,CAAC2B,CDCEjB,AECCF,IAAI,CFDA,GAAGR,CAAC,AECC,CAAZ,CDFJ,CDCkB,AECC,CFDnB,ACDkB;ADElB,AGJJ,AFGQ,ACEIwC,ICLNQ,EDKMR,EFDF7B,GAAG,ACDE,GDCCX,CAAC,ACDT,CEHU,CDKK,CFDH,AECI2C,CFDpB,AGJiB,QDKT,CCLNK,ADK4BJ,GAAtB,CAA0B,OAA1B,CCLS,CAACpC,IAAD,EAAU;AHK3B,AGJA,AFGC,ACEOgC,MCLFS,ADKET,EFDF5B,IAAI,EGJI,CHIDZ,CAAC,CGJG,ADKE,CAACsC,CFDH,CAAjB,OECQ,GAAwB,EAAxB,CCLcY,MAAM,CAAC1C,IAAD,CAAX,EAAmBgB,KAAnB,CAAjB;AHKA,AECK,QFDCX,MAAM,GAAGV,UAAU,CAACW,QAAX,CAAoBd,CAApB,CAAf;AACA,AGLA,AFGA,MEHI,AFGE6B,CEHDoB,CHKClC,MCFQ,CDED,AGLb,EAAe,AFGES,CDEDpB,ICFM,CAACN,GAAN,CAAU,EDEA,CAACgB,OCFDO,CDEX,CAAqBrB,CAArB,CAAhB,ECFiC;ADGjC,AGLI,AFE6B,ACG7BwC,IAAAA,IFAExB,GGLK,AFE0BK,EDG1B,EGLP,ADKW,CFADV,AEAEkC,CDH2B,CAACxB,CDG3B,GAAGpB,CEAhB,CDH6B,ACGTO,IAApB,EFAJ,CEA+BA,IAA3B;AFCJ,AGLC,AFCgC,ACI7B,GDJa,CAAjB,IDIMS,GEAKuB,GFAC,GAAG5B,IAAI,CEAf,EFAkBV,QAAtB;AACA,ACJA,ACIC,GAToB,CAArB,EDKM4B,EDIFZ,KAAK,GAAG,ACJI,CDIHX,ECJMsB,GDID,CAACpB,IAAD,ACJS,CDIf,ACJgBsB,EDIFxB,KAAK,ACJZ,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","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["const initialCells = Array(16).fill(undefined).map((_, i) => i);\n\nexport const MIN_CELL = 0;\nexport const MAX_CELL = 15;\nconst borderLeft = [0, 4, 8, 12];\nconst borderRight = borderLeft.map(cellN => cellN + 3);\n\nexport const calculateGraph = cells => cells.map((cell, i) => {\n    const left = i - 1;\n    const right = i + 1;\n    const top = i - 4;\n    const down = i + 4;\n    const isLeft = borderLeft.includes(i);\n    const isRight = borderRight.includes(i);\n    const isTop = top < MIN_CELL;\n    const isDown = down > MAX_CELL;\n    let edges = [cells[left], cells[right], cells[top], cells[down]];\n    if(isTop) {\n        edges = edges.filter(edge => edge !== cells[top]);\n    }\n    if(isDown) {\n        edges = edges.filter(edge => edge !== cells[down]);\n    }\n    if(isRight) {\n        edges = edges.filter(edge => edge !== cells[right]);\n    }\n    if(isLeft) {\n        edges = edges.filter(edge => edge !== cells[left]);\n    }\n    return {\n        vertex: cells[i],\n        edges\n    };\n});\n\nexport const initialGraph = calculateGraph(initialCells);\n\n/*\n* todo Нужна функция, которая принимает список HTML-элементов и возвращает новый граф\n*      так мы будем знать, куда переехала новая вершина и какие у неё соседи\n* */\n","import {calculateGraph, MAX_CELL, MIN_CELL} from './graph';\n\nexport const move = (cell, graph) => {\n    if(cell > MAX_CELL || cell < MIN_CELL) {\n        return null;\n    }\n    const cellVertex = graph.find(vertex => vertex.vertex === cell);\n    const hasEmptyCell = cellVertex.edges.filter(edge => edge === 0).length > 0;\n    if(!hasEmptyCell) {\n        return null;\n    }\n    const vertexes = graph.map(vertex => vertex.vertex);\n    const emptyIndex = vertexes.indexOf(0);\n    const cellIndex = vertexes.indexOf(cell);\n    vertexes.splice(emptyIndex, 1, cell);\n    vertexes.splice(cellIndex, 1, 0);\n    return calculateGraph(vertexes);\n};\n","export const render = graph => {\n    if(graph === null) {\n        return null;\n    }\n    const grid = document.querySelector('.grid');\n    grid.innerHTML = '';\n    const cells = graph.map(vertex => vertex.vertex);\n    const cellElements = cells.map(cell => {\n        const cellElement = document.createElement('div');\n        cellElement.className = `cell cell${cell}`;\n        if(cell === 0) {\n            cellElement.classList.add('empty');\n            cellElement.innerHTML = '';\n        }\n        cellElement.dataset.cell = cell;\n        return cellElement;\n    });\n    cellElements.forEach(cellElement => {\n        grid.appendChild(cellElement);\n    });\n};\n","import {initialGraph} from './graph';\nimport {move} from './move';\nimport {render} from './render';\n\nlet graph = initialGraph;\n\nconst clickHandler = (cell) => {\n    const newGraph = move(Number(cell), graph);\n    if (!newGraph) {\n        return null;\n    }\n    graph = newGraph;\n    render(graph);\n    const cells = [...document.querySelectorAll('.cell')];\n    cells.forEach(cellElement => {\n        cellElement.addEventListener('click', e => {\n            clickHandler(e.target.dataset.cell);\n        });\n    })\n};\nconst randomGenerator = () => Math.floor(Math.random() * 16);\n\nrender(graph);\n\nconst startButton = document.querySelector('.empty');\n\nconst start = () => {\n    const intervalId = setInterval(() => {\n        clickHandler(randomGenerator());\n    }, 10);\n\n    setTimeout(() => {\n        clearInterval(intervalId);\n    }, 5000);\n    startButton.removeEventListener('click', start);\n};\n\nstartButton.addEventListener('click', start);\n\nconst cells = [...document.querySelectorAll('.cell')];\ncells.forEach(cellElement => {\n    cellElement.addEventListener('click', e => {\n        clickHandler(e.target.dataset.cell);\n    });\n});\n"]}